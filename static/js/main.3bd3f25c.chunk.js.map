{"version":3,"sources":["TableApp.jsx","App.js","serviceWorker.js","index.js"],"names":["TableApp","props","state","renderData","options","updateData","data","newState","this","push","setState","index","splice","pindex","iindex","value","key","colData","console","log","className","map","Pindex","item","Iindex","colDefs","type","onChange","target","handleChange","toggleCheckbox","checked","length","React","Component","App","prompt","refs","child","update","delete","add","style","border","display","margin","maxWidth","ref","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bd3f25c.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass TableApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            renderData : this.props.options,\n            updateData: \"\"\n        }\n    }\n    add(data) {\n        let newState = {...this.state};\n        newState[\"renderData\"].data.push(...data);\n        this.setState(newState);\n    }\n    update(index) {\n        let newState = {...this.state};\n        newState[\"updateData\"] = this.state.renderData.data[index];\n        this.setState(newState);\n    }\n    delete(index) {\n        let newState = {...this.state};\n        newState[\"renderData\"].data.splice(index, 1);\n        this.setState(newState);\n    }\n    handleChange(pindex, iindex, value, key) {\n        let newState = {...this.state};\n        newState.renderData.data[pindex].colData[iindex] = value;\n        this.setState(newState)\n    }\n    toggleCheckbox(pindex, iindex, value, key) {\n        let newState = {...this.state};\n        newState.renderData.data[pindex].colData[iindex] = !this.state.renderData.data[pindex].colData[iindex];\n        this.setState(newState)\n    }\n\n    render() {\n        console.log(this.state)\n        return(\n            <div>\n            <table className=\"employeeTable\">\n                <thead>\n                    <tr>\n                        <th>\n                            Employee Name\n                        </th>\n                        <th>\n                            Emp Address\n                        </th>\n                        <th>\n                            IsEmpVerified\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        this.state.renderData.data && this.state.renderData.data.map((data, Pindex) => {\n                            return(\n                                <tr key={Pindex}>\n                                    {\n                                        data.colData.map((item, Iindex) => {\n                                            return(\n                                                <td key={Iindex}>\n                                                    {\n                                                        this.state.renderData.colDefs[Iindex].type === \"text\" ? item : \"\" \n                                                    }{\n                                                        this.state.renderData.colDefs[Iindex].type === \"input\" ? (<input value={item} onChange={({ target }) => this.handleChange(Pindex, Iindex, target.value, item)} />): \"\"\n                                                    }\n                                                    {   this.state.renderData.colDefs[Iindex].type === \"checkbox\" ? (<input onChange={({ target }) => this.toggleCheckbox(Pindex, Iindex, target.value, item)}  checked={item} type={\"checkbox\"}/>): \"\"\n                                                    }\n                                                </td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                    <tr>\n\n                    </tr>\n                </tbody>\n            </table>\n            {\n                this.state.updateData ? (\n                    <div className=\"edit-wrap\">\n                        <h3>Update </h3>\n                        <form>\n                            <div className=\"group\">\n                                <label >Employee Name</label>\n                                <input type=\"text\" value={this.state.updateData.colData && this.state.updateData.colData.length>0 && this.state.updateData.colData[0]}/>\n                            </div>\n                            <div className=\"group\">\n                                <label >Employee Address</label>\n                                <input type=\"text\" value={this.state.updateData.colData && this.state.updateData.colData.length>0 && this.state.updateData.colData[1]} />\n                            </div>\n                            <div className=\"group\">\n                                <label>IsAddressVerified\n                                    <input type=\"checkbox\" checked={this.state.updateData.colData && this.state.updateData.colData.length>0 && this.state.updateData.colData[2]} />\n                                </label>\n                            </div>\n                            <button>Submit</button>\n                        </form>\n                    </div>): \"\"\n            }\n        </div>)\n    }\n}\n\nexport default TableApp;","import React from 'react';\nimport './App.css';\nimport TableApp from \"./TableApp\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  \n    this.options = {\n      colDefs : [{\n        \"label\": \"Text Columns\",\n        \"width\": \"40 % \",\n        \"type\": \"text\"\n      },\n      {\n        \"label\": \"Input Column\",\n        \"width\": \"60 % \",\n        \"type\": \"input\"\n      },\n      {\n        \"label\": \"Checkbox Column\",\n        \"width\": \"30 px\",\n        \"type\": \"checkbox\"\n      }],\n      data: [{\n        \"id\": \"1a\",\n        \"colData\": [\"Laxman\", \"Bangalore, India\", true]\n      },\n      {\n        \"id\": \"2a\",\n        \"colData\": [\"Ram\", \"Delhi, Malviya Nagar\", false]\n      }, {\n        \"id\": \"3a\",\n        \"colData\": [\"Jyotishman\", \"Noida, Sector 27\", true]\n      }, {\n        \"id\": \"4a\",\n        \"colData\": [\"Pankaj\", \"Gurgaon, India\", false]\n      }, {\n        \"id\": \"5a\",\n        \"colData\": [\"Ashish\", \"UP, India\", true]\n      }, {\n        \"id\": \"6a\",\n        \"colData\": [\"Pulkit\", \"Pune, India\", true]\n      }]\n    }\n  }\n  update () {\n    var index = prompt(\"Which row  you want to update\", \"\");\n    if(index)\n      this.refs.child.update(index-1);\n  }\n  delete() {\n    var index = prompt(\"Which row  you want to delete\", \"\");\n    if(index)\n      this.refs.child.delete(index-1);\n  }\n  add() {\n    this.refs.child.add(this.options.data);\n  }\n  render() {\n  return (\n    <div className=\"App\">\n      <div style={{ border: \"1px solid #000\", display: \"block\", margin: \"auto\", maxWidth: \"500px\"}}>\n        <h3>Inside Table Component</h3>\n        <TableApp options = {this.options}  ref=\"child\"/>\n      </div>\n\n      <div className=\"btn-wrap\">\n        <p>Main App</p>\n        <button onClick={()=> this.add()}>Add more</button>\n        <button onClick={()=> this.delete()}>Delete</button>\n        <button onClick={()=> this.update()}>Update</button>\n      </div>\n      \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}